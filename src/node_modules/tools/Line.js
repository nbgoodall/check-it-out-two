import Tool from './Tool'

import { get } from 'svelte/store'

import { project } from 'store'

import { PIXEL_SIZE } from 'config/constants'

import { getPixelPosition, hexToRgba } from 'lib'

class Line extends Tool {
  constructor() {
    super()

    this.cursor = 'crosshair'

    this.pixels = []

    this.name = 'line'
  }

  mouseDown(evt) {
    super.mouseDown(evt)
  }

  bresenhamLine(callback) {
    const { x1, y1, x2, y2 } = this.getPositions()

    let deltaX = Math.abs(x2 - x1),
        deltaY = Math.abs(y2 - y1)

    let sx = (x1 < x2) ? 1 : -1,
        sy = (y1 < y2) ? 1 : -1

    let error = deltaX - deltaY

    let x = x1, y = y1

    while(true) {
      callback(x, y)

      if ((x === x2) && (y === y2)) break

      let err2 = 2 * error;

      if (err2 > -deltaY) {
        error -= deltaY
        x     += sx
      }

      if (err2 < deltaX) {
        error += deltaX
        y     += sy
      }
    }
  }

  mouseUp(evt) {
    if (!this.x1 || !this.y1) return false

    const proj = get(project)

    this.bresenhamLine((x, y) => {
      return proj.currentFrame.setPixel(x, y, proj.color)
    })

    super.mouseUp(evt)
  }

  render(ctx) {
    if (this.x1 && this.y1 && this.x2 && this.y2) {
      ctx.fillStyle = hexToRgba(get(project).color, 0.5)

      this.bresenhamLine((x, y) => {
        ctx.fillRect(x * PIXEL_SIZE, y * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE);
      })
    }
  }
}

export default new Line()