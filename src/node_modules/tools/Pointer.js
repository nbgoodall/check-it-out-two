import Tool from './Tool'

import { RESOLUTION, PIXEL_SIZE } from 'config/constants'

// import { store } from 'store'

class Pointer extends Tool {
  constructor() {
    super()

    this.cursor = 'default'

    this.name = 'pointer'
  }

  mouseDown(evt, store) {
    const frame = this.project.currentFrame

    let activeLayerIds = store.get('activeLayerIds')

    // Hovering over a layer or clicking within its bounds
    let layer = Object.values(frame.layers).find(layer => {
      return layer.hovering || (activeLayerIds.includes(layer.id) && layer.withinBounds(evt))
    })

    if (layer) {
      layer.active = true

      if (evt.metaKey || evt.ctrlKey) {

        // Metalicking already active layer? â€“ remove from active
        if (activeLayerIds.includes(layer.id)) {
          let idIndex = activeLayerIds.indexOf(layer.id)

          activeLayerIds.splice(idIndex, 1)
        }
        else {
          activeLayerIds.push(layer.id)
        }
      }
      // Clicking without metakey on a different layer
      else if (!activeLayerIds.includes(layer.id)) {
        activeLayerIds = [layer.id]
      }
    }
    else {
      activeLayerIds = []
    }

    store.update({ activeLayerIds })
  }

  mouseMove(evt, store) {
    const frame = this.project.currentFrame

    // Move layer(s)
    if (evt.buttons) {
      let layerIds = store.get('activeLayerIds')

      for (let id of layerIds) {
        frame.layers[id]._x += evt.movementX
        frame.layers[id]._y += evt.movementY
      }
    }

    // Hovering over layers
    else {
      store.update({ hoveringId: null })

      let highlighted = false

      let x = Math.floor(evt.offsetX / PIXEL_SIZE),
          y = Math.floor(evt.offsetY / PIXEL_SIZE)

      for (let id of frame.layerIds) {
        let layer = frame.layers[id]
        layer.hovering = false

        if (!highlighted && layer.getPixel(x, y)) {
          highlighted = true
          layer.hovering = true

          store.update({ hoveringId: layer.id })
        }
      }
    }
  }

  mouseLeave(evt, store) {
    return store.update({ hoveringId: null })
  }
}

export default new Pointer()