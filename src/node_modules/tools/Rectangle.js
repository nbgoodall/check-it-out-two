import Tool from './Tool'

import { get } from 'svelte/store'

import { project, store } from 'store'

import { DrawPixels } from 'commands'

import { PIXEL_SIZE } from 'config/constants'

import { hexToRgba } from 'lib'

class Rectangle extends Tool {
  constructor() {
    super()

    this.cursor = 'crosshair'

    this.name = 'rectangle'

    this.eraseable = true
  }

  // Returns { [x]: new Set(y1, y2, ..., yN) }
  get pixels() {
    const { x1, y1, x2, y2 } = this.getOrientatedPositions()

    const proj = get(project)

    let pixels = {}

    for (let x = x1; x <= x2; x++) {
      pixels[x] = {
        [y1]: proj.color,
        [y2]: proj.color
      }
    }

    for (let y = y1; y <= y2; y++) {
      for (let x of [x1, x2]) {
        pixels[x][y] = proj.color
      }
    }

    return pixels
  }

  mouseUp(evt) {
    if (!this.x1 || !this.y1) return false

    DrawPixels.perform({ frame: get(project).currentFrame, pixels: this.pixels })

    super.mouseUp(evt)
  }

  render(ctx) {
    if (this.x1 && this.y1 && this.x2 && this.y2) {
      let pixels = this.pixels

      ctx.fillStyle = store.get('eraseModifier') ? 'rgba(0,0,0,0.3)' : hexToRgba(get(project).color, 0.75)

      for (let x in pixels) {
        for (let y in pixels[x]) {
          ctx.fillRect(x * PIXEL_SIZE, y * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE)
        }
      }
    }
  }
}

export default new Rectangle()