import Tool from './Tool'

import { PIXEL_SIZE } from 'config/constants'

import { getPixelPosition, hexToRgba } from 'lib'

class Rectangle extends Tool {
  constructor() {
    super()

    this.cursor = 'crosshair'

    this.name = 'rectangle'
  }

  mouseDown(evt) {
    this.startX = evt.offsetX
    this.startY = evt.offsetY

    this.x = evt.offsetX
    this.y = evt.offsetY
  }

  reset() {
    this.startX = null
    this.startY = null
    this.x = null
    this.y = null
  }

  mouseMove(evt) {
    const isMouseDown = evt.buttons == 1

    if (!isMouseDown) {
      this.reset()

      return false
    }

    this.x = evt.offsetX
    this.y = evt.offsetY
  }

  getPositions() {
    return {
      x1: getPixelPosition(Math.min(this.startX, this.x)),
      y1: getPixelPosition(Math.min(this.startY, this.y)),
      x2: getPixelPosition(Math.max(this.startX, this.x)),
      y2: getPixelPosition(Math.max(this.startY, this.y))
    }
  }

  mouseUp(evt) {
    const { x1, y1, x2, y2 } = this.getPositions()

    for (let y = y1; y <= y2; y++) {
      for (let x = x1; x <= x2; x++) {
        this.project.currentFrame.setPixel(x, y, this.project.color)
      }
      // pixels[y] = [
      //   ...pixels[y].slice(0, x1),
      //   ...new Array(x2 - x1 + 1).fill(this.project.color),
      //   ...pixels[y].slice(x2 + 1)
      // ]
    }

    // this.project.currentFrame.currentLayer.pixels = pixels

    this.reset()
  }

  render(ctx, layer) {
    if (this.startX && this.startY && this.x && this.y) {
      // const width = this.x - this.startX,
      //      height = this.y - this.startY

      // Draw overlay
      // ctx.fillStyle = 'rgba(1, 150, 255, 0.2)'
      // ctx.fillRect(this.startX, this.startY, width, height)

      const { x1, y1, x2, y2 } = this.getPositions()

      let dx = x2 - x1 + 1,
          dy = y2 - y1 + 1

      ctx.fillStyle = hexToRgba(this.project.color, 0.5)

      ctx.fillRect(x1 * PIXEL_SIZE, y1 * PIXEL_SIZE, dx * PIXEL_SIZE, dy * PIXEL_SIZE)


      // Draw border
      // var gradient = ctx.createLinearGradient(this.startX, this.startY, width, height);

      // gradient.addColorStop(0,   '#FF2C8F');
      // gradient.addColorStop(0.5, '#01FFFF');
      // gradient.addColorStop(1,   '#01FF70');

      // ctx.lineWidth = 1
      // ctx.strokeStyle = gradient

      // ctx.strokeRect(this.startX, this.startY, width, height)
    }
  }
}

export default new Rectangle()