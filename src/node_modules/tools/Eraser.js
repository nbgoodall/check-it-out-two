import {
  PIXEL_SIZE
} from 'config/constants'

import Tool from './Tool'

import { get } from 'svelte/store'

import { project, store } from 'store'

import { DrawPixels } from 'commands'

import { getPixelPositions } from 'lib'

import { renderPixels } from 'lib/drawing'
class Eraser extends Tool {
  constructor() {
    super()

    // this.cursor = 'crosshair'

    this.name = 'eraser'

    // this.shapeFn = line
  }

  erase(evt) {
    const { x, y } = getPixelPositions(evt)

    return (this.pixels[x] = this.pixels[x] || {})[y] = null
  }

  render(ctx) {
    for (let x in this.pixels) {
      for (let y in this.pixels[x]) {
        ctx.fillStyle = 'rgba(0,0,0,0.2)'

        ctx.fillRect(x * PIXEL_SIZE, y * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE)
      }
    }
  }

  mouseDown(evt) {
    this.pixels = {}

    return this.erase(evt)
  }

  mouseMove(evt) {
    const isMouseDown = evt.buttons == 1

    if (!isMouseDown) { return false }

    return this.erase(evt)
  }

  mouseUp(evt) {
    if (store.get('activeLayerIds').length > 0) {
      DrawPixels.perform({ frame: get(project).currentFrame, pixels: this.pixels })
    }

    this.reset()
  }

  reset() {
    super.reset()

    this.pixels = {}
  }
}

export default new Eraser()