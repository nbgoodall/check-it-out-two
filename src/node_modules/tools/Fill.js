import Tool from './Tool'

import { RESOLUTION } from 'config/constants'

import { getPixelPositions } from 'lib'

class Fill extends Tool {
  constructor() {
    super()

    this.cursor = 'fill'

    this.name = 'fill'

    this.filled = []

    this.fillCount = 0

    this.fill = (...args) => {
      this.fillCount++

      return setTimeout(() => this._fill(...args), 0)
    }
  }

  decrementFillCount() {
    this.fillCount--

    if (this.fillCount === 0) {
      this.project.currentFrame.saveImage()

      this.project.update()
    }
  }

  _fill(y, x) {
    let coords = `${y}_${x}`

    if (this.filled.includes(coords)) {
      this.decrementFillCount()

      return false
    }

    this.filled.push(coords)

    let frame = this.project.currentFrame

    frame.setPixel(x, y, this.project.color)

    // const row = [
    //   ...this.pixels[y].slice(0, x),
    //   this.project.color,
    //   ...this.pixels[y].slice(x + 1)
    // ]

    // this.pixels.splice(y, 1, row)

    if (y < RESOLUTION - 1 && frame.getPixel(x, y + 1) == this.targetColor) {
      this.fill(y + 1, x)
    }

    if (y > 0 && frame.getPixel(x, y - 1) == this.targetColor) {
      this.fill(y - 1, x)
    }

    if (x < RESOLUTION - 1 && frame.getPixel(x + 1, y) == this.targetColor) {
      this.fill(y, x + 1)
    }

    if (x > 0 && frame.getPixel(x - 1, y) == this.targetColor) {
      this.fill(y, x - 1)
    }

    this.decrementFillCount()
  }

  mouseUp(evt) {
    let frame = this.project.currentFrame

    const { x, y } = getPixelPositions(evt)

    if (frame.getPixel(x, y) != this.project.color) {
      this.targetColor = frame.getPixel(x, y)

      this.fillCount = 0

      this.fill(y, x)

      this.filled = []
    }

    // this.project.currentFrame.currentLayer.pixels = this.pixels

    return this.project.update()
  }
}

// Mad instance life
export default new Fill()