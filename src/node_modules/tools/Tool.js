import { getPixelPosition } from 'lib'

class Tool {
  constructor() {
    this.mouseUp    = this.mouseUp.bind(this)
    this.mouseDown  = this.mouseDown.bind(this)
    this.mouseMove  = this.mouseMove.bind(this)
    this.mouseLeave = this.mouseLeave.bind(this)

    this.cursor = 'default'
  }

  getPositions() {
    let positions = {}

    for (let key of ['x1', 'y1', 'x2', 'y2']) {
      positions[key] = getPixelPosition(this[key])
    }

    return positions
  }

  getOrientatedPositions() {
    return {
      x1: getPixelPosition(Math.min(this.x1, this.x2)),
      y1: getPixelPosition(Math.min(this.y1, this.y2)),
      x2: getPixelPosition(Math.max(this.x1, this.x2)),
      y2: getPixelPosition(Math.max(this.y1, this.y2))
    }
  }

  get width() {
    return this.x2 - this.x1
  }

  get height() {
    return this.y2 - this.y1
  }

  mouseDown(evt) {
    this.x1 = evt.offsetX
    this.y1 = evt.offsetY
    this.x2 = evt.offsetX
    this.y2 = evt.offsetY
  }

  mouseMove(evt) {
    const isMouseDown = evt.buttons == 1

    if (!isMouseDown) {
      this.reset()

      return false
    }

    this.x2 = evt.offsetX
    this.y2 = evt.offsetY
  }

  reset() {
    this.x1 = null
    this.x2 = null
    this.y1 = null
    this.y2 = null
  }

  mouseUp(evt) {
    this.reset()
  }

  mouseLeave(evt) { return false }

  render(ctx) { return false }
}

export default Tool