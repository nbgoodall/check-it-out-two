import { RESOLUTION } from 'config/constants'

import { createBlankImage, render, createImage, importImage } from 'lib/frames'

const defaultProps = {
  id: 0,
  backgroundColor: 'transparent',
  // Prevent those stale defaults
  get image() { return createBlankImage() },
  get pixels() { return new Array(RESOLUTION).fill(new Array(RESOLUTION).fill('transparent')) }
}

class Frame {
  constructor(props = {}) {
    let _props = { ...defaultProps, ...props }

    for (let name of Object.getOwnPropertyNames(_props)) {
      this[name] = _props[name]
    }
  }

  static clone(frame, id) {
    let image = frame.image.cloneNode(true)

    let pixels = []

    for (let row of frame.pixels) {
      pixels.push([ ...row ])
    }

    const _clone = Object.setPrototypeOf({ ...frame, pixels, image, id }, Frame.prototype)

    return _clone;
  }

  updatePixel(x, y, value) {
    const row = [
      ...this.pixels[y].slice(0, x),
      value,
      ...this.pixels[y].slice(x + 1)
    ]

    this.pixels.splice(y, 1, row)
  }

  clear() {
    this.pixels = defaultProps.pixels

    this.saveImage()
  }

  render(ctx, backgroundColor = null) {
    return render(ctx, this.pixels, backgroundColor)
  }

  saveImage(backgroundColor) {
    this.image.src = createImage(this.pixels, backgroundColor)
  }

  async importImage(src) {
    this.pixels = await importImage(src)

    this.saveImage()
  }

  serialize(colors) {
    const pixels = this.pixels.map(row => row.map(pixel => colors.indexOf(pixel)))

    return { ...this, pixels }
  }

  static deserialize(json, colors) {
    let frame = new Frame({ ...json })

    const pixels = json.pixels.map(row => row.map(pixelIndex => colors[pixelIndex] || 'rgba(0,0,0,0)'))

    frame.pixels = pixels
    frame.image = createBlankImage()
    frame.saveImage()

    return frame
  }
}

export default Frame;