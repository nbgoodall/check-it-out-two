import { get } from 'svelte/store'

import KEYCODES from 'config/keycodes'

import { PIXEL_SIZE } from 'config/constants'

import Layer from './Layer'

import { MoveLayer, MergeLayers, Cut, Copy, Paste } from 'commands'

import { History } from 'history'

import tools from 'tools'

import { project, store, clipboard, mouse } from 'store'

/*
  Layers
*/

const selectLayer = (number, append = false) => evt => {
  let frame = get(project).currentFrame

  let layerId = frame.layerIds[number - 1]

  if (layerId) {
    let activeLayerIds = [...get(store).activeLayerIds]

    if (append) {
      let index = activeLayerIds.indexOf(layerId)

      if (index !== -1) {
        activeLayerIds.splice(index, 1)
      }
      else {
        activeLayerIds.push(layerId)
      }

      store.update({ tool: 'pointer' })
    }
    else {
      activeLayerIds = [layerId]
    }

    store.update({ activeLayerIds })
  }

  return null
}

const layerSelections = () => {
  let commands = {
    0: selectLayer(10),
    cmd_0: selectLayer(10, true)
  }

  for (let i = 1; i < 10; i++) {
    commands[i] = selectLayer(i)
    commands['cmd_' + i] = selectLayer(i, true)
  }

  return commands
}

const mergeActiveLayers = () => {
  let layerIds = [...get(store).activeLayerIds]

  return MergeLayers.perform({
    frameId: get(project).currentFrame.id,
    layerIds
  })
}

const moveLayer = (x, y) => ({
  conditions: () => document.activeElement.tagName !== 'INPUT',
  method: evt => {
    let multiplier = evt.shiftKey ? 5 : 1

    let frame = get(project).currentFrame,
          ids = get(store).activeLayerIds

    for (let id of ids) {
      let dx = x * PIXEL_SIZE * multiplier,
          dy = y * PIXEL_SIZE * multiplier

      MoveLayer.perform({ id, frameId: frame.id, dx, dy })

      frame.layers[id]._x += dx
      frame.layers[id]._y += dy
    }

    return true
  }
})

const changeLayerZIndex = direction => evt => {
  return get(project).currentFrame.changeZIndices(get(store).activeLayerIds, direction)
}

const selectAllLayers = {
  conditions: () => document.activeElement.tagName !== 'INPUT',
  method: evt => store.update({
    tool: 'pointer',
    activeLayerIds: get(project).currentFrame.layerIds
  })
}

const deleteActiveLayers = evt => {
  get(project).currentFrame.destroyLayers(get(store).activeLayerIds)

  store.update({ activeLayerIds: [] })
}

/* End layers */

const setTool = tool => evt => store.update({ tool })

/*
  Frames
*/

const FRAMES_IN_ROW = 10 // poor constant placement, FYI.

const switchFrame = (x, y) => evt => {
  const proj = get(project)

  // Move left & right
  if (x !== 0) {
    proj.frameIndex = Math.max(0, Math.min(proj.frameIndex + x, proj.frames.length - 1))
  }

  // Move up & down
  if ((y === -1 && proj.frameIndex >= FRAMES_IN_ROW) ||
      (y === +1 && proj.frameIndex < proj.frames.length - FRAMES_IN_ROW))
  {
     proj.frameIndex = Math.max(0, Math.min(proj.frameIndex + y * FRAMES_IN_ROW, proj.frames.length - 1))
  }
}

const addFrame = duplicate => evt => {
  let addBefore = evt.shiftKey

  get(project).addFrame(addBefore, duplicate)
}

const duplicateFrame = addFrame(true)

const deleteFrame = evt => get(project).deleteCurrentFrame()

/* End frames */


/*
  Cut, copy & paste
*/

const copyParams = () => {
  const frameId = get(project).currentFrame.id

  const layerIds = get(store).activeLayerIds

  return { frameId, layerIds }
}

const cut = () => Cut.perform(copyParams())

const copy = () => Copy.perform(copyParams())

const paste = () => Paste.perform()

/* End cut, copy & paste */

/* Undo & redo */

const undo = evt => evt.shiftKey ? History.redo() : History.undo()

const redo = evt => History.redo()

/* End undo & redo */

/*
  Project controls
*/

const toggleUnderlay = () => {
  let proj = get(project)

  return proj.showUnderlay = !proj.showUnderlay
}

const toggleGrid = () => {
  let proj = get(project)

  return proj.showGrid = !proj.showGrid
}

const play = () => {
  // HMM
}

/* End project controls */

const _escape = evt => {
  const { buttons } = get(mouse)

  if (buttons) {
    tools[store.get('tool')].reset()
  }
  else if (get(store).activeLayerIds.length === 0) {
    store.update({ tool: 'pointer' })
  }
  else {
    store.update({ activeLayerIds: [] })
  }
}

/*
  Shortcut pattern = (cmd_)(shift_){ key name }
*/

const SHORTCUTS = {
  // Tools
  p: setTool('pointer'),
  b: setTool('brush'),
  r: setTool('rectangle'),
  o: setTool('ellipse'),
  f: setTool('fill'),
  l: setTool('line'),

  // Layers
  left:  moveLayer(-1, 0),
  right: moveLayer(+1, 0),
  up:    moveLayer(0, -1),
  down:  moveLayer(0, +1),

  cmd_j: mergeActiveLayers,

  ...layerSelections(),

  cmd_left_square_bracket: changeLayerZIndex(1),
  cmd_right_square_bracket: changeLayerZIndex(-1),

  // Frames
  cmd_f: addFrame(false),
  cmd_d: duplicateFrame,
  cmd_left:  switchFrame(-1, 0),
  cmd_right: switchFrame(+1, 0),
  cmd_up:    switchFrame(0, -1),
  cmd_down:  switchFrame(0, +1),

  cmd_a: selectAllLayers,

  backspace: deleteActiveLayers,
  cmd_backspace: deleteFrame,

  // Cut, copy & paste
  cmd_x: cut,
  cmd_c: copy,
  cmd_v: paste,

  // Undo & redo
  cmd_z: undo,
  cmd_y: redo,

  // Project
  cmd_u: toggleUnderlay,
  cmd_l: toggleGrid,

  spacebar: play,

  // Misc
  escape: _escape,
}

const trueFn = (evt) => evt

class Shortcut {
  static call(evt) {
    let key = KEYCODES[evt.keyCode]

    if (!key) return false

    if (evt.metaKey || evt.ctrlKey) {
      key = 'cmd_' + key
    }

    // if (evt.shiftKey) {
    //   key = 'shift_' + key
    // }

    let shortcut = SHORTCUTS[key]

    const isValid = shortcut && ((shortcut.conditions || trueFn)(evt))

    if (isValid) {
      evt.preventDefault()

      let result = (shortcut.method || shortcut)(evt)

      return project.update(proj => {
        proj.currentFrame.saveImage()

        return proj;
      })
    }

    return false
  }
}

export default Shortcut