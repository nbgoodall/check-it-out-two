import { RESOLUTION, PIXEL_SIZE } from 'config/constants'

import { get } from 'svelte/store'

import { store, project } from 'store'

import Command from './Command'

import { AddLayer } from './layers'

import { getLayer } from './utils'


/* Draw pixels

  pixels = {
    [x]: {
      [y]: '#ABC123'
    }
  }
*/

// TODO: switch active frame if history happened in a diff frame...

const drawPixel = ({ layer, x, y, color }) => {
  if (layer.pixels[x]) {
    if (color === null || color === 'transparent') {
      delete layer.pixels[x][y]

      if (Object.keys(layer.pixels[x]).length <= 0) {
        delete layer.pixels[x]
      }
    }
    else {
      layer.pixels[x][y] = color
    }
  }
  else if (color && color !== 'transparent') {
    layer.pixels[x] = { [y]: color }
  }
}

const drawPixels = ({ layer, pixels }) => {
  for (let x in pixels) {
    for (let y in pixels[x]) {
      let color = pixels[x][y]

      drawPixel({ layer, x, y, color })
    }
  }

  layer.updateBounds()
}

const transformPixels = ({ layer, pixels }) => {
  let newPixels = {},
      oldPixels = {}

  const dX = layer.x / PIXEL_SIZE,
        dY = layer.y / PIXEL_SIZE

  for (let x in pixels) {
    let nX = Number(x) - dX

    newPixels[nX] = {}
    oldPixels[nX] = {}

    for (let y in pixels[x]) {
      let nY = Number(y) - dY

      let oldValue = (layer.pixels[x] || {})[y] || null

      newPixels[nX][nY] = pixels[x][y]
      oldPixels[nX][nY] = oldValue
    }
  }

  return { newPixels, oldPixels }
}

class DrawPixels extends Command {
  static perform({ frame, pixels }) {

    let [layerId, ...ids] = store.get('activeLayerIds')

    // Person has selected many layers â€” don't want to draw on all at once.. or do we?!
    if (ids.length > 0) return false

    // Layer exists!
    if (layerId) {
      const layer = frame.layers[layerId]

      const { newPixels, oldPixels } = transformPixels({ layer, pixels })

      drawPixels({ layer, pixels: newPixels })

      this.push('DrawPixels', { frameId: frame.id, layerId, newPixels, oldPixels })
    }
    // New Layer
    else {
      AddLayer.perform(frame, { pixels })
    }
  }

  static undo({ frameId, layerId, oldPixels }) {
    const layer = getLayer(frameId, layerId)

    return drawPixels({ layer, pixels: oldPixels })
  }

  static redo({ frameId, layerId, newPixels }) {
    const layer = getLayer(frameId, layerId)

    return drawPixels({ layer, pixels: newPixels })
  }
}

// Undoing the slo-ish-mo fill effect would be EPIC :O
class FillPixels extends Command {}

export {
  DrawPixels
}