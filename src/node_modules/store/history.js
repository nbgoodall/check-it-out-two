/*
  The store for history â€” undoing, redoing, etc.
*/

import { writable } from 'svelte/store'

import { genericStore } from './utils'

const STORE_KEY = '@history'

/*

*/

const INITIAL_STATE = {
  timeline: [],
  index: -1
}

const historyStore = genericStore(STORE_KEY, INITIAL_STATE)

const STORE = writable(historyStore.read())

STORE.subscribe(historyStore.write)

export const history = {
  ...STORE,
  update: value => STORE.update(state => {
    const result = typeof value === 'function' ? value(state) : value

    return { ...state, ...result }
  }),
  push: (name, action = {}) => STORE.update(state => {

    // End the future
    let timeline = [...state.timeline].slice(0, state.index + 1)

    timeline.push({ name, state: action })

    const index = state.index + 1

    return { index, timeline }
  })
}