/*
  Bresenham line algorithm
*/

const line = ({ x1, y1, x2, y2, color }) => {
  let pixels = {}

  let deltaX = Math.abs(x2 - x1),
      deltaY = Math.abs(y2 - y1)

  let sx = (x1 < x2) ? 1 : -1,
      sy = (y1 < y2) ? 1 : -1

  let error = deltaX - deltaY

  let x = x1, y = y1

  while (true) {
    (pixels[x] = pixels[x] || {})[y] = color

    if ((x === x2) && (y === y2)) break

    let err2 = 2 * error;

    if (err2 > -deltaY) {
      error -= deltaY
      x     += sx
    }

    if (err2 < deltaX) {
      error += deltaX
      y     += sy
    }
  }

  return pixels
}

/*
  Mid-point ellipse algorithm

  TODO: re-write to work with odd-widths as well (e.g., doesn't currently work with 4 pixel width)
*/

const ellipseCoords = ({ xc, yc, x, y }) => ([
  [xc + x, yc + y],
  [xc - x, yc - y],
  [xc + x, yc - y],
  [xc - x, yc + y],
])

const ellipse = ({ x1, y1, x2, y2, color }) => {
  let pixels = {}

  const addPixels = ({ xc, yc, x, y }) => {
    const coords = ellipseCoords({ xc, yc, x, y })

    for (let [x, y] of coords) {
      (pixels[x] = pixels[x] || {})[y] = color
    }

    return pixels
  }

  /*
    a = horizontal radius
    b = vertical radius
  */
  let a = Math.round(Math.abs(x2 - x1) / 2),
      b = Math.round(Math.abs(y2 - y1) / 2)

  let xc = Math.min(x1, x2) + a,
      yc = Math.min(y1, y2) + b

  let a2 = a * a,
      b2 = b * b

  let twoa2 = 2 * a2,
      twob2 = 2 * b2

  let p
  let x = 0
  let y = b
  let px = 0
  let py = twoa2 * y

  /* Plot the initial point in each quadrant. */
  addPixels({ xc, yc, x, y })

  /* Region 1 */
  p = Math.round (b2 - (a2 * b) + (0.25 * a2))

  while (px < py) {
    x++
    px += twob2

    if (p < 0) {
      p += b2 + px
    }
    else {
      y--
      py -= twoa2
      p += b2 + px - py
    }

    addPixels({ xc, yc, x, y })
  }

  /* Region 2 */
  p = Math.round (b2 * (x+0.5) * (x+0.5) + a2 * (y-1) * (y-1) - a2 * b2)

  while (y > 0) {
    y--
    py -= twoa2

    if (p > 0) {
      p += a2 - py
    }

    else {
      x++
      px += twob2
      p += a2 - py + px
    }

    addPixels({ xc, yc, x, y })
  }

  return pixels
}

export {
  line,
  ellipse
}